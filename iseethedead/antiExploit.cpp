#include "pch.h"
#include "antiExploit.h"

static antiExploit::OutOfMapExploit e1;

int antiExploit::OutOfMapExploitFilter(unsigned int code, struct _EXCEPTION_POINTERS* ep)
{
	if (code == 0xc0000005 && ep->ContextRecord->Eip == gameDll + 0x765530) {
		return EXCEPTION_EXECUTE_HANDLER;
	}
	else {
		return EXCEPTION_CONTINUE_SEARCH;
	}
}

void * __fastcall antiExploit::protectOutOfMapExploit(unsigned int ecx, unsigned int edx, void* s1)
{
	__try {
		return e1(ecx, edx, s1);
	}
	__except (antiExploit::OutOfMapExploitFilter(GetExceptionCode(), GetExceptionInformation())) {
		logger->warn("\xE6\x88\x90\xE5\x8A\x9F\xE9\x98\xBB\xE6\xAD\xA2\x4F\x75\x74\x4F\x66\x4D\x61\x70\xE5\xB4\xA9\xE6\xBA\x83");;
	}
}

void antiExploit::init()
{
	//e1 = (UnknownExploit1)(gameDll + 0x7654C0);
	e1 = (OutOfMapExploit)(gameDll + 0x76E560);
	int error = DetourTransactionBegin();
	if (error == NO_ERROR)
	{
		DetourUpdateThread(GetCurrentThread());
		DetourAttach(&(PVOID&)e1, protectOutOfMapExploit);
		DetourTransactionCommit();
	}
}
